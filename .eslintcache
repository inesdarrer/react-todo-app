[{"C:\\Users\\Thc\\react-todo-app\\src\\index.js":"1","C:\\Users\\Thc\\react-todo-app\\src\\App.js":"2","C:\\Users\\Thc\\react-todo-app\\src\\components\\TodoForm.js":"3","C:\\Users\\Thc\\react-todo-app\\src\\components\\TodoList.js":"4","C:\\Users\\Thc\\react-todo-app\\src\\components\\Todo.js":"5"},{"size":199,"mtime":1610782346494,"results":"6","hashOfConfig":"7"},{"size":211,"mtime":1610884944270,"results":"8","hashOfConfig":"7"},{"size":1444,"mtime":1610746186106,"results":"9","hashOfConfig":"7"},{"size":1224,"mtime":1610744351610,"results":"10","hashOfConfig":"7"},{"size":1266,"mtime":1610744580777,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"10frjrk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Thc\\react-todo-app\\src\\index.js",[],["24","25"],"C:\\Users\\Thc\\react-todo-app\\src\\App.js",[],"C:\\Users\\Thc\\react-todo-app\\src\\components\\TodoForm.js",[],"C:\\Users\\Thc\\react-todo-app\\src\\components\\TodoList.js",[],"C:\\Users\\Thc\\react-todo-app\\src\\components\\Todo.js",["26"],"import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport TodoList from './TodoList';\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo,updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id:null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        })\r\n    }\r\n\r\n    if(edit.id) {\r\n        return <TodoForm edit ={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \r\n        key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine \r\n                onClick = {() => removeTodo(todo.id)}\r\n                className='delete-icon'\r\n                />\r\n                <TiEdit onClick = {() => setEdit({id : todo.id, value:todo.text})}\r\n                className='edit-icon' />\r\n            </div>\r\n        </div>\r\n        \r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":3,"column":8,"nodeType":"33","messageId":"34","endLine":3,"endColumn":16},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'TodoList' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]